;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : YUME TCS3200 + Photodiode Tracer Processor
;Version : Ver.3.0
;Date    : April 21st 2016
;Author  : Ryan Batch 2013
;Company : Intelligent Fire Fighting Robot Division - Brawijaya University
;Comments:   Ver. 1 -> Basic function
;            Ver. 2 -> EEPROM autocalibration feature
;            Ver. 3 -> Optimization
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <math.h>
;#include <YUME2016_TCS3200TRACER_Hybrid_Processor_Ver_1.h>

	.DSEG
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0057 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0058 char status,data;
; 0000 0059 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005A data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 005B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 005C    {
; 0000 005D    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 005E #if RX_BUFFER_SIZE == 256
; 0000 005F    // special case for receiver buffer size=256
; 0000 0060    if (++rx_counter == 0)
; 0000 0061       {
; 0000 0062 #else
; 0000 0063    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0064    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0065       {
; 0000 0066       rx_counter=0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0067 #endif
; 0000 0068       rx_buffer_overflow=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0069       }
; 0000 006A    }
;PCODE: $0000002E VOL: 0
; 0000 006B }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0072 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0073 char data;
; 0000 0074 while (rx_counter==0);
;PCODE: $00000036 VOL: 0
;	data -> R17
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0075 data=rx_buffer[rx_rd_index++];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0076 #if RX_BUFFER_SIZE != 256
; 0000 0077 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0078 #endif
; 0000 0079 #asm("cli")
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
	cli
;PCODE: $0000004B VOL: 0
; 0000 007A --rx_counter;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007B #asm("sei")
;PCODE: $0000004F VOL: 0
	sei
;PCODE: $00000050 VOL: 0
; 0000 007C return data;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007D }
;PCODE: $00000054 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0086 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0087 // Place your code here
; 0000 0088     TCS3200_COUNTER++;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0089 
; 0000 008A }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0091 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0092 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000060 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0093 // Delay needed for the stabilization of the ADC input voltage
; 0000 0094 delay_us(10);
;PCODE: $00000064 VOL: 0
; 0000 0095 // Start the AD conversion
; 0000 0096 ADCSRA|=0x40;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0097 // Wait for the AD conversion to complete
; 0000 0098 while ((ADCSRA & 0x10)==0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0099 ADCSRA|=0x10;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009A return ADCH;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009B }
;PCODE: $00000072 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00A0 {
;PCODE: $00000073 VOL: 0
; 0000 00A1 
; 0000 00A2     YUME_Initialization();
;PCODE: $00000074 VOL: 0
; 0000 00A3     TCS3200_Config(3);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A4 
; 0000 00A5     while (1)
;PCODE: $00000078 VOL: 0
; 0000 00A6     {
; 0000 00A7 //        TRIGGER= getchar();
; 0000 00A8 //        printf("\r\r");
; 0000 00A9 //        if(TRIGGER=='X')
; 0000 00AA //        {
; 0000 00AB ////            Tracer_Sampling(FRONT);
; 0000 00AC ////            Tracer_Sampling(MIDDLE);
; 0000 00AD ////            Tracer_Sampling(REAR);
; 0000 00AE //
; 0000 00AF //            Tracer_GetRule();
; 0000 00B0 //
; 0000 00B1 //            //TCS3200_Sampling();
; 0000 00B2 ////            TCS3200_GetRule();
; 0000 00B3 //            TRIGGER=0;
; 0000 00B4 //        }
; 0000 00B5 
; 0000 00B6         Get_CMD();
;PCODE: $00000079 VOL: 0
; 0000 00B7 
; 0000 00B8     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B9 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;
;void YUME_Initialization(void)
; 0000 00BD {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BE     // Declare your local variables here
; 0000 00BF 
; 0000 00C0     // Input/Output Ports initialization
; 0000 00C1     // Port B initialization
; 0000 00C2     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 00C3     // State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
; 0000 00C4     PORTB=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C5     DDRB=0x07;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C6 
; 0000 00C7     // Port C initialization
; 0000 00C8     // Func6=In Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 00C9     // State6=T State5=0 State4=0 State3=0 State2=T State1=T State0=T
; 0000 00CA     PORTC=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CB     DDRC=0x38;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00CC 
; 0000 00CD     // Port D initialization
; 0000 00CE     // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 00CF     // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=T
; 0000 00D0     PORTD=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00D1     DDRD=0x18;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D2 
; 0000 00D3     // Timer/Counter 0 initialization
; 0000 00D4     // Clock source: System Clock
; 0000 00D5     // Clock value: Timer 0 Stopped
; 0000 00D6     TCCR0=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00D7     TCNT0=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D8 
; 0000 00D9     // Timer/Counter 1 initialization
; 0000 00DA     // Clock source: System Clock
; 0000 00DB     // Clock value: Timer1 Stopped
; 0000 00DC     // Mode: Normal top=0xFFFF
; 0000 00DD     // OC1A output: Discon.
; 0000 00DE     // OC1B output: Discon.
; 0000 00DF     // Noise Canceler: Off
; 0000 00E0     // Input Capture on Falling Edge
; 0000 00E1     // Timer1 Overflow Interrupt: On
; 0000 00E2     // Input Capture Interrupt: Off
; 0000 00E3     // Compare A Match Interrupt: Off
; 0000 00E4     // Compare B Match Interrupt: Off
; 0000 00E5     TCCR1A=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00E6     TCCR1B=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00E7     TCNT1H=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00E8     TCNT1L=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00E9     ICR1H=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00EA     ICR1L=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00EB     OCR1AH=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00EC     OCR1AL=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00ED     OCR1BH=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00EE     OCR1BL=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00EF 
; 0000 00F0     // Timer/Counter 2 initialization
; 0000 00F1     // Clock source: System Clock
; 0000 00F2     // Clock value: Timer2 Stopped
; 0000 00F3     // Mode: Normal top=0xFF
; 0000 00F4     // OC2 output: Disconnected
; 0000 00F5     ASSR=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F6     TCCR2=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00F7     TCNT2=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00F8     OCR2=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00F9 
; 0000 00FA     // External Interrupt(s) initialization
; 0000 00FB     // INT0: Off
; 0000 00FC     // INT1: Off
; 0000 00FD     MCUCR=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00FE 
; 0000 00FF     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0100     TIMSK=0x04;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0101 
; 0000 0102     // USART initialization
; 0000 0103     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0104     // USART Receiver: On
; 0000 0105     // USART Transmitter: On
; 0000 0106     // USART Mode: Asynchronous
; 0000 0107     // USART Baud Rate: 9600
; 0000 0108     UCSRA=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0109     UCSRB=0x98;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 010A     UCSRC=0x86;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 010B     UBRRH=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 010C     UBRRL=0x67;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 010D 
; 0000 010E     // Analog Comparator initialization
; 0000 010F     // Analog Comparator: Off
; 0000 0110     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0111     ACSR=0x80;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0112     SFIOR=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0113 
; 0000 0114     // ADC initialization
; 0000 0115     // ADC Clock frequency: 500.000 kHz
; 0000 0116     // ADC Voltage Reference: AVCC pin
; 0000 0117     // Only the 8 most significant bits of
; 0000 0118     // the AD conversion result are used
; 0000 0119     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 011A     ADCSRA=0x85;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 011B 
; 0000 011C     // SPI initialization
; 0000 011D     // SPI disabled
; 0000 011E     SPCR=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 011F 
; 0000 0120     // TWI initialization
; 0000 0121     // TWI disabled
; 0000 0122     TWCR=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0123 
; 0000 0124     // Global enable interrupts
; 0000 0125     #asm("sei")
;PCODE: $000000C7 VOL: 0
	sei
;PCODE: $000000C8 VOL: 0
; 0000 0126 
; 0000 0127 }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;
;void Send_UART(unsigned char data)
; 0000 012A {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 012B     while(!(UCSRA & (1<<UDRE))){};
;PCODE: $000000CD VOL: 0
;	data -> Y+0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 012C     UDR=data;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 012D }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;
;
;void TCS3200_Config(unsigned int mode)
; 0000 0131 {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0132     if(mode==0)         //output frequency scaling power down
;PCODE: $000000DB VOL: 0
;	mode -> Y+0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0133     {
; 0000 0134         TCS3200_S0=0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0135         TCS3200_S1=0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0136     }
; 0000 0137     if(mode==1)         //output frequency scaling 1:50
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0138     {
; 0000 0139         TCS3200_S0=0;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 013A         TCS3200_S1=1;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 013B     }
; 0000 013C     if(mode==2)         //output frequency scaling 1:5
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 013D     {
; 0000 013E         TCS3200_S0=1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 013F         TCS3200_S1=0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0140     }
; 0000 0141     if(mode==3)         //output frequency scaling 1:1
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0142     {
; 0000 0143         TCS3200_S0=1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0144         TCS3200_S1=1;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0145     }
; 0000 0146     return;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0147 }
;PCODE: $000000FE VOL: 0
;
;
;void TCS3200Read(void)
; 0000 014B {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 014C     TCS3200Read_R();
;PCODE: $00000101 VOL: 0
; 0000 014D     TCS3200Read_G();
;PCODE: $00000102 VOL: 0
; 0000 014E     TCS3200Read_B();
;PCODE: $00000103 VOL: 0
; 0000 014F     TCS3200Read_W();
;PCODE: $00000104 VOL: 0
; 0000 0150 
; 0000 0151 //    printf("Red  : %d \t",(int)TCS3200_Pulse_R);
; 0000 0152 //    printf("Green: %d \t",(int)TCS3200_Pulse_G);
; 0000 0153 //    printf("Blue: %d \t",(int)TCS3200_Pulse_B);
; 0000 0154 //    printf("White: %d \r",(int)TCS3200_Pulse_W);
; 0000 0155 }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;
;int TCS3200Read_R(void)
; 0000 0158 {
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0159      TCS3200_S2=0;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 015A      TCS3200_S3=0;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 015B      delay_ms(5);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 015C      TCCR1B=0x06;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 015D      delay_ms(5);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 015E      TCCR1B=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 015F      TCS3200_Pulse_R=((int)TCS3200_COUNTER*256)+(int)TCNT1;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0160      TCNT1=0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0161      TCS3200_COUNTER=0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0162      delay_ms(10);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0163      return TCS3200_Pulse_R;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0164 
; 0000 0165 }
;PCODE: $00000126 VOL: 0
;
;int TCS3200Read_G(void)
; 0000 0168 {
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0169      TCS3200_S2=1;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 016A      TCS3200_S3=1;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 016B      delay_ms(5);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 016C      TCCR1B=0x06;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 016D      delay_ms(5);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 016E      TCCR1B=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 016F      TCS3200_Pulse_G=((int)TCS3200_COUNTER*256)+(int)TCNT1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0170 //    TCS3200_Pulse_G=((int)MIDDLE_COUNTER*65536)+(int)TCNT1;
; 0000 0171      TCNT1=0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0172      TCS3200_COUNTER=0;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0173      delay_ms(10);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0174      return TCS3200_Pulse_G;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0175 
; 0000 0176 }
;PCODE: $00000146 VOL: 0
;
;int TCS3200Read_B(void)
; 0000 0179 {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 017A      TCS3200_S2=0;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 017B      TCS3200_S3=1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 017C      delay_ms(5);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 017D      TCCR1B=0x06;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 017E      delay_ms(5);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 017F      TCCR1B=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0180      TCS3200_Pulse_B=((int)TCS3200_COUNTER*256)+(int)TCNT1;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0181 //     TCS3200_Pulse_B=((int)TCS3200_COUNTER*65536)+(int)TCNT1;
; 0000 0182      TCNT1=0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0183      TCS3200_COUNTER=0;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0184      delay_ms(10);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0185      return TCS3200_Pulse_B;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0186 
; 0000 0187 }
;PCODE: $00000166 VOL: 0
;
;int TCS3200Read_W(void)
; 0000 018A {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 018B      TCS3200_S2=1;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 018C      TCS3200_S3=0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 018D      delay_ms(5);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 018E      TCCR1B=0x06;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 018F      delay_ms(5);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0190      TCCR1B=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0191      TCS3200_Pulse_W=((int)TCS3200_COUNTER*256)+(int)TCNT1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0192 //    TCS3200_Pulse_W=((int)TCS3200_COUNTER*65536)+(int)TCNT1;
; 0000 0193      TCNT1=0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0194      TCS3200_COUNTER=0;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0195      delay_ms(10);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0196      return TCS3200_Pulse_W;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0197 
; 0000 0198 }
;PCODE: $00000186 VOL: 0
;
;
;
;/*
; * DATA PACKET STRUCTURE
; * [COMMAND_FLAG_A] [COMMAND_FLAG_B] [F_DETECTED_COLOUR] [M_DETECTED_COLOUR] [TRACER_STAT] [COLOUR_STAT]
; *
;*/
;void Send_TCS3200_Conclusion(void)
; 0000 01A2 {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 01A3     Send_UART(COMMAND_FLAG_A);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01A4     Send_UART(COMMAND_FLAG_B);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 01A5     Send_UART(DETECTED_COLOUR);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 01A6     Send_UART(TRACER_STAT);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 01A7 }
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;
;void Get_CMD(void)
; 0000 01AA {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 01AB     TCS3200_CMD[TEMPORARY] = getchar();;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 01AC 
; 0000 01AD     if(TCS3200_CMD[TEMPORARY]!=CMD_IDLE)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 01AE     {
; 0000 01AF         TCS3200_CMD[1] = TCS3200_CMD[0];
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 01B0         TCS3200_CMD[0] = TCS3200_CMD[TEMPORARY];
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 01B1     }
; 0000 01B2 
; 0000 01B3     //Switch-case version
; 0000 01B4     switch(TCS3200_CMD[0])
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 01B5     {
; 0000 01B6         case TCS3200_CMD_SEND_RAW:{
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 01B7                                     TCS3200_Sampling();
;PCODE: $000001A9 VOL: 0
; 0000 01B8                                     Send_UART(COMMAND_FLAG_A);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 01B9                                     Send_UART(COMMAND_FLAG_B);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 01BA                                     Send_UART(RAW_VAL_FLAG);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 01BB 
; 0000 01BC                                     //RED FILTER RAW VALUE
; 0000 01BD                                     MULTIPLY_COUNTER=0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 01BE                                     if(MOV_AVG[TCS3200_RED]>255)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 01BF                                     {
; 0000 01C0                                         while( MOV_AVG[TCS3200_RED] >255)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 01C1                                         {
; 0000 01C2                                            MOV_AVG[TCS3200_RED]-=255;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 01C3                                            MULTIPLY_COUNTER++;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01C4                                         }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 01C5                                     }
; 0000 01C6                                     Send_UART(MULTIPLY_COUNTER);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 01C7                                     Send_UART(MOV_AVG[TCS3200_RED]);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 01C8 
; 0000 01C9                                     //GREEN FILTER RAW VALUE
; 0000 01CA                                     MULTIPLY_COUNTER=0;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 01CB                                     if(MOV_AVG[TCS3200_GREEN]>255)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 01CC                                     {
; 0000 01CD                                         while( MOV_AVG[TCS3200_GREEN] >255)
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 01CE                                         {
; 0000 01CF                                            MOV_AVG[TCS3200_GREEN]-=255;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 01D0                                            MULTIPLY_COUNTER++;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 01D1                                         }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01D2                                     }
; 0000 01D3                                     Send_UART(MULTIPLY_COUNTER);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 01D4                                     Send_UART(MOV_AVG[TCS3200_GREEN]);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01D5 
; 0000 01D6                                     //BLUE FILTER RAW VALUE
; 0000 01D7                                     MULTIPLY_COUNTER=0;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 01D8                                     if(MOV_AVG[TCS3200_BLUE]>255)
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 01D9                                     {
; 0000 01DA                                         while( MOV_AVG[TCS3200_BLUE] >255)
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 01DB                                         {
; 0000 01DC                                            MOV_AVG[TCS3200_BLUE]-=255;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 01DD                                            MULTIPLY_COUNTER++;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 01DE                                         }
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 01DF                                     }
; 0000 01E0                                     Send_UART(MULTIPLY_COUNTER);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 01E1                                     Send_UART(MOV_AVG[TCS3200_BLUE]);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 01E2 
; 0000 01E3                                     //WHITE FILTER RAW VALUE
; 0000 01E4                                     MULTIPLY_COUNTER=0;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 01E5                                     if(MOV_AVG[TCS3200_WHITE]>255)
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 01E6                                     {
; 0000 01E7                                         while( MOV_AVG[TCS3200_WHITE] >255)
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 01E8                                         {
; 0000 01E9                                            MOV_AVG[TCS3200_WHITE]-=255;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 01EA                                            MULTIPLY_COUNTER++;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 01EB                                         }
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01EC                                     }
; 0000 01ED                                     Send_UART(MULTIPLY_COUNTER);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 01EE                                     Send_UART(MOV_AVG[TCS3200_WHITE]);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 01EF 
; 0000 01F0                                     //SUM FILTER RAW VALUE
; 0000 01F1                                     MULTIPLY_COUNTER=0;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 01F2                                     if(TCS3200_TOTAL_SUM>255)
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01F3                                     {
; 0000 01F4                                         while( TCS3200_TOTAL_SUM >255)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01F5                                         {
; 0000 01F6                                            TCS3200_TOTAL_SUM-=255;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01F7                                            MULTIPLY_COUNTER++;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01F8                                         }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 01F9                                     }
; 0000 01FA                                     Send_UART(MULTIPLY_COUNTER);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 01FB                                     Send_UART(TCS3200_TOTAL_SUM);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01FC 
; 0000 01FD                                 }break;
;PCODE: $00000237 VOL: 0
; 0000 01FE 
; 0000 01FF 
; 0000 0200         case TRACER_CMD_SEND_RAW:{
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0201                                         Tracer_GetRule();
;PCODE: $0000023B VOL: 0
; 0000 0202                                         Send_UART(COMMAND_FLAG_A);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0203                                         Send_UART(COMMAND_FLAG_B);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0204                                         Send_UART(RAW_VAL_FLAG);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0205                                         Send_UART(TRACER[FRONT]);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0206                                         Send_UART(TRACER[MIDDLE]);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0207                                         Send_UART(TRACER[REAR]);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0208                                         Send_UART(TRACER_STAT);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0209                                         Send_UART(TRACER_THRESHOLD);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 020A 
; 0000 020B                                 }break;
;PCODE: $0000024E VOL: 0
; 0000 020C 
; 0000 020D         case HYBRID_CMD_SEND_CONCLUSION:
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 020E                                     {
; 0000 020F                                         Tracer_GetRule();
;PCODE: $00000252 VOL: 0
; 0000 0210                                         TCS3200_GetRule();
;PCODE: $00000253 VOL: 0
; 0000 0211                                         Send_UART(COMMAND_FLAG_A);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0212                                         Send_UART(COMMAND_FLAG_B);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0213                                         Send_UART(DETECTED_COLOUR);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0214                                         Send_UART(TRACER_STAT);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0215 //                                        Send_UART(TRACER[FRONT]);
; 0000 0216 //                                        Send_UART(TRACER[MIDDLE]);
; 0000 0217 //                                        Send_UART(TRACER[REAR]);
; 0000 0218 
; 0000 0219                                     }break;
;PCODE: $0000025C VOL: 0
; 0000 021A         case CMD_GET_TCS3200            :
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 021B                                     {
; 0000 021C                                         TCS3200_GetRule();
;PCODE: $00000260 VOL: 0
; 0000 021D                                         Send_UART(COMMAND_FLAG_A);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 021E                                         Send_UART(COMMAND_FLAG_B);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 021F                                         Send_UART(DETECTED_COLOUR);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0220                                         Send_UART(0x00);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0221                                     }break;
;PCODE: $00000269 VOL: 0
; 0000 0222         case CMD_GET_TRACER            :
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0223                                     {
; 0000 0224                                         Tracer_GetRule();
;PCODE: $0000026D VOL: 0
; 0000 0225                                         Send_UART(COMMAND_FLAG_A);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0226                                         Send_UART(COMMAND_FLAG_B);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0227                                         Send_UART(0x00);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0228                                         Send_UART(TRACER_STAT);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0229                                     }break;
;PCODE: $00000276 VOL: 0
; 0000 022A 
; 0000 022B         case TCS3200_CMD_SAVE_EEPROM:
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 022C                                     {
; 0000 022D                                         TCS3200Read();
;PCODE: $0000027A VOL: 0
; 0000 022E                                         EEPROM_A= TCS3200_Pulse_G;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 022F                                         EEPROM_B= TCS3200_Pulse_B;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0230                                         EEPROM_C= TCS3200_Pulse_W;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0231                                         EEPROM_D= TCS3200_Pulse_Sum;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0232                                     }break;
;PCODE: $00000287 VOL: 0
; 0000 0233 
; 0000 0234         case HYBRID_CMD_SEND_THRESHOLD:
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0235                                     {
; 0000 0236                                         Send_Threshold();
;PCODE: $0000028B VOL: 0
; 0000 0237                                     }break;
;PCODE: $0000028C VOL: 0
; 0000 0238 
; 0000 0239         case TCS3200_CALIBRATE_WHITE:
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 023A                                     {
; 0000 023B                                         TCS3200_Sampling();
;PCODE: $00000290 VOL: 0
; 0000 023C                                         Threshold_White= TCS3200_TOTAL_SUM;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 023D                                     }break;
;PCODE: $00000293 VOL: 0
; 0000 023E         case TCS3200_CALIBRATE_BLACK:
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 023F                                     {
; 0000 0240 
; 0000 0241                                         TCS3200_Sampling();
;PCODE: $00000297 VOL: 0
; 0000 0242                                         Threshold_Black = TCS3200_TOTAL_SUM;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 0243                                     }break;
;PCODE: $0000029A VOL: 0
; 0000 0244         case TCS3200_CALIBRATE_GRAY:
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0245                                     {
; 0000 0246 
; 0000 0247                                         TCS3200_Sampling();
;PCODE: $0000029E VOL: 0
; 0000 0248                                         Threshold_Gray = TCS3200_TOTAL_SUM;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0249                                     }break;
;PCODE: $000002A1 VOL: 0
; 0000 024A         case TCS3200_CALIBRATE_GETRULE:
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 024B                                     {
; 0000 024C                                         Threshold_Diff = Threshold_White-Threshold_Gray;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 024D 
; 0000 024E                                         if(Threshold_Diff>1400)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 024F                                         {
; 0000 0250                                             Threshold_BW = Threshold_Gray + 1390;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 0251                                         }
; 0000 0252                                         else if(Threshold_Diff>1350)
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0253                                         {
; 0000 0254                                             Threshold_BW = Threshold_Gray + 1340;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0255                                         }
; 0000 0256 
; 0000 0257                                         else if(Threshold_Diff>1300)
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0258                                         {
; 0000 0259                                             Threshold_BW = Threshold_Gray + 1290;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 025A                                         }
; 0000 025B                                         else if(Threshold_Diff>1250)
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 025C                                         {
; 0000 025D                                             Threshold_BW = Threshold_Gray + 1240;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 025E                                         }
; 0000 025F 
; 0000 0260                                         else if(Threshold_Diff>1200)
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0261                                         {
; 0000 0262                                             Threshold_BW = Threshold_Gray + 1190;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0263                                         }
; 0000 0264                                         else if(Threshold_Diff>1150)
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0265                                         {
; 0000 0266                                             Threshold_BW = Threshold_Gray + 1140;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0267                                         }
; 0000 0268 
; 0000 0269                                         else if(Threshold_Diff>1100)
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 026A                                         {
; 0000 026B                                             Threshold_BW = Threshold_Gray + 1190;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 026C                                         }
; 0000 026D                                         else if(Threshold_Diff>1050)
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 026E                                         {
; 0000 026F                                             Threshold_BW = Threshold_Gray + 1040;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0270                                         }
; 0000 0271                                         else if(Threshold_Diff>1000)
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0272                                         {
; 0000 0273                                             Threshold_BW = Threshold_Gray + 990;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0274                                         }
; 0000 0275 
; 0000 0276                                         else if(Threshold_Diff>950)
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0277                                         {
; 0000 0278                                             Threshold_BW = Threshold_Gray + 940;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0279                                         }
; 0000 027A 
; 0000 027B                                         else if(Threshold_Diff>900)
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 027C                                         {
; 0000 027D                                             Threshold_BW = Threshold_Gray + 890;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 027E                                         }
; 0000 027F 
; 0000 0280                                         else if(Threshold_Diff>850)
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0281                                         {
; 0000 0282                                             Threshold_BW = Threshold_Gray + 840;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0283                                         }
; 0000 0284 
; 0000 0285                                         else if(Threshold_Diff>800)
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0286                                         {
; 0000 0287                                             Threshold_BW = Threshold_Gray + 790;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0288                                         }
; 0000 0289                                         else if(Threshold_Diff>700)
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 028A                                         {
; 0000 028B                                             Threshold_BW = Threshold_Gray + 690;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 028C                                         }
; 0000 028D                                         else if(Threshold_Diff>600)
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 028E                                         {
; 0000 028F                                             Threshold_BW = Threshold_Gray + 590;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0290                                         }
; 0000 0291                                         else if(Threshold_Diff>500)
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0292                                         {
; 0000 0293                                             Threshold_BW = Threshold_Gray + 490;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0294                                         }
; 0000 0295                                         else if(Threshold_Diff>450)
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0296                                         {
; 0000 0297                                             Threshold_BW = Threshold_Gray + 440;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 0298                                         }
; 0000 0299                                         else if(Threshold_Diff>400)
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 029A                                         {
; 0000 029B                                             Threshold_BW = Threshold_Gray + 390;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 029C                                         }
; 0000 029D                                         else if(Threshold_Diff>350)
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 029E                                         {
; 0000 029F                                             Threshold_BW = Threshold_Gray + 340;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 02A0                                         }
; 0000 02A1                                         else if(Threshold_Diff>300)
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 02A2                                         {
; 0000 02A3                                             Threshold_BW = Threshold_Gray + 290;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 02A4                                         }
; 0000 02A5                                         else if(Threshold_Diff>250)
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 02A6                                         {
; 0000 02A7                                             Threshold_BW = Threshold_Gray + 240;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 02A8                                         }
; 0000 02A9                                         else if(Threshold_Diff>200)
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 02AA                                         {
; 0000 02AB                                             Threshold_BW = Threshold_Gray + 190;
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 02AC                                         }
; 0000 02AD                                         else if(Threshold_Diff>150)
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 02AE                                         {
; 0000 02AF                                             Threshold_BW = Threshold_Gray + 140;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 02B0                                         }
; 0000 02B1                                         else if(Threshold_Diff>100)
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 02B2                                         {
; 0000 02B3                                             Threshold_BW = Threshold_Gray + 90;
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 02B4                                         }
; 0000 02B5                                         else if(Threshold_Diff>50)
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 02B6                                         {
; 0000 02B7                                             Threshold_BW = Threshold_Gray + 40;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 02B8                                         }
; 0000 02B9                                         else
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 02BA                                         {
; 0000 02BB                                             Threshold_BW = Threshold_Gray + 30;
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 02BC                                         }
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 02BD 
; 0000 02BE 
; 0000 02BF                                         Threshold_Diff= Threshold_Gray - Threshold_Black;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 02C0 
; 0000 02C1 //                                        if(Threshold_Diff>400)
; 0000 02C2 //                                        {
; 0000 02C3 //                                            Threshold_BG = Threshold_Black + 375;
; 0000 02C4 //                                        }
; 0000 02C5 //                                        if(Threshold_Diff>375)
; 0000 02C6 //                                        {
; 0000 02C7 //                                            Threshold_BG = Threshold_Black + 350;
; 0000 02C8 //                                        }
; 0000 02C9 //                                        else if(Threshold_Diff>350)
; 0000 02CA //                                        {
; 0000 02CB //                                            Threshold_BG = Threshold_Black + 325;
; 0000 02CC //                                        }
; 0000 02CD 
; 0000 02CE //======COMMENT 03-10-2016======//
; 0000 02CF /*
; 0000 02D0                                         if(Threshold_Diff>310)
; 0000 02D1                                         {
; 0000 02D2                                             Threshold_BG = Threshold_Black + 300;
; 0000 02D3                                         }
; 0000 02D4 
; 0000 02D5                                         else if(Threshold_Diff>300)
; 0000 02D6                                         {
; 0000 02D7                                             Threshold_BG = Threshold_Black + 290;
; 0000 02D8                                         }
; 0000 02D9 */
; 0000 02DA 
; 0000 02DB                                        // else
; 0000 02DC                                         if(Threshold_Diff>290)
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 02DD                                         {
; 0000 02DE                                             Threshold_BG = Threshold_Black + 280;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 02DF                                         }
; 0000 02E0 
; 0000 02E1 
; 0000 02E2                                         else if(Threshold_Diff>280)
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 02E3                                         {
; 0000 02E4                                             Threshold_BG = Threshold_Black + 270;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 02E5                                         }
; 0000 02E6 
; 0000 02E7                                         else if(Threshold_Diff>270)
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 02E8                                         {
; 0000 02E9                                             Threshold_BG = Threshold_Black + 260;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 02EA                                         }
; 0000 02EB 
; 0000 02EC                                         else if(Threshold_Diff>260)
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 02ED                                         {
; 0000 02EE                                             Threshold_BG = Threshold_Black + 250;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 02EF                                         }
; 0000 02F0 
; 0000 02F1                                         else if(Threshold_Diff>250)
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 02F2                                         {
; 0000 02F3                                             Threshold_BG = Threshold_Black + 225;
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 02F4                                         }
; 0000 02F5                                         else if(Threshold_Diff>225)
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 02F6                                         {
; 0000 02F7                                             Threshold_BG = Threshold_Black + 200;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 02F8                                         }
; 0000 02F9 
; 0000 02FA                                         else if(Threshold_Diff>200)
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 02FB                                         {
; 0000 02FC                                             Threshold_BG = Threshold_Black + 175;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 02FD                                         }
; 0000 02FE                                         else if(Threshold_Diff>175)
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 02FF                                         {
; 0000 0300                                             Threshold_BG = Threshold_Black + 150;
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0301                                         }
; 0000 0302 
; 0000 0303                                         else if(Threshold_Diff>150)
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 0304                                         {
; 0000 0305                                             Threshold_BG = Threshold_Black + 125;
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0306                                         }
; 0000 0307                                         else if(Threshold_Diff>125)
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 0308                                         {
; 0000 0309                                             Threshold_BG = Threshold_Black + 100;
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 030A                                         }
; 0000 030B                                         else if(Threshold_Diff>100)
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 030C                                         {
; 0000 030D                                             Threshold_BG = Threshold_Black + 75;
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 030E                                         }
; 0000 030F                                         else if(Threshold_Diff>75)
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 0310                                         {
; 0000 0311                                             Threshold_BG = Threshold_Black + 50;
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0312                                         }
; 0000 0313                                         else if(Threshold_Diff>50)
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 0314                                         {
; 0000 0315                                             Threshold_BG = Threshold_Black + 25;
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 0316                                         }
; 0000 0317                                         else
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 0318                                         {
; 0000 0319                                             Threshold_BG = Threshold_Black + 25;
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 031A                                         }
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 031B                                     }break;
;PCODE: $00000407 VOL: 0
; 0000 031C 
; 0000 031D             case TRACER_CALIBRATE_GRAY:
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 031E                                     {
; 0000 031F                                         Tracer_GetData_Gray();
;PCODE: $0000040B VOL: 0
; 0000 0320                                     }break;
;PCODE: $0000040C VOL: 0
; 0000 0321 
; 0000 0322             case TRACER_CALIBRATE_WHITE:
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 0323                                     {
; 0000 0324                                         Tracer_GetData_White();
;PCODE: $00000410 VOL: 0
; 0000 0325                                     }break;
;PCODE: $00000411 VOL: 0
; 0000 0326 
; 0000 0327             case TRACER_CALIBRATE_GETRULE:
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 0328                                     {
; 0000 0329                                         Tracer_Calibrate_GetRule();
;PCODE: $00000415 VOL: 0
; 0000 032A                                     }break;
;PCODE: $00000416 VOL: 0
; 0000 032B     }
;PCODE: $00000417 VOL: 0
; 0000 032C 
; 0000 032D }
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;
;int Tracer_Sampling(int MODE)
; 0000 0330 {
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 0331 
; 0000 0332     int counter=0;
; 0000 0333     int TRACER_TEMP[5]={0,0,0,0,0};
; 0000 0334     int TRACER_SUM=0;
; 0000 0335 
; 0000 0336 
; 0000 0337     switch(MODE)
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;	MODE -> Y+14
;	counter -> R16,R17
;	TRACER_TEMP -> Y+4
;	TRACER_SUM -> R18,R19
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 0338     {
; 0000 0339         case 0: {
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 033A                     for(counter=0;counter<=4;counter++)
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 033B                     {
; 0000 033C                         TRACER_TEMP[counter]= read_adc(2);
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 033D                     }
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 033E 
; 0000 033F                     TRACER_SUM= TRACER_TEMP[0]+TRACER_TEMP[1]+TRACER_TEMP[2]+TRACER_TEMP[3]+TRACER_TEMP[4];
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 0340                     TRACER[FRONT]=TRACER_SUM/5;
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 0341 
; 0000 0342                     if(TRACER[FRONT]>=TRACER_THRESHOLD)
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 0343                     {
; 0000 0344 //                        printf("TRACER FRONT ACTIVE \r");
; 0000 0345                         TRACER_SECTION[FRONT]= TRACER_ACTIVE;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0346                     }
; 0000 0347 
; 0000 0348                     else
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0349                     {
; 0000 034A //                        printf("TRACER FRONT INACTIVE \r");
; 0000 034B                         TRACER_SECTION[FRONT]= TRACER_INACTIVE;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 034C                     }
;PCODE: $0000045A VOL: 0
; 0000 034D                     return TRACER[FRONT];
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 034E                 }break;
;PCODE: $0000045F VOL: 0
; 0000 034F 
; 0000 0350         case 1: {
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 0351 
; 0000 0352                     for(counter=0;counter<=4;counter++)
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0353                     {
; 0000 0354                         TRACER_TEMP[counter]= read_adc(1);
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 0355                     }
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 0356 
; 0000 0357                     TRACER_SUM= TRACER_TEMP[0]+TRACER_TEMP[1]+TRACER_TEMP[2]+TRACER_TEMP[3]+TRACER_TEMP[4];
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0358                     TRACER[MIDDLE]=TRACER_SUM/5;
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0359 
; 0000 035A                     if(TRACER[MIDDLE]>=TRACER_THRESHOLD)
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 035B                     {
; 0000 035C //                        printf("TRACER MIDDLE ACTIVE \r");
; 0000 035D                         TRACER_SECTION[MIDDLE]= TRACER_ACTIVE;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 035E                     }
; 0000 035F 
; 0000 0360                     else
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 0361                     {
; 0000 0362 //                        printf("TRACER MIDDLE INACTIVE \r");
; 0000 0363                         TRACER_SECTION[MIDDLE]= TRACER_INACTIVE;
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0364                     }
;PCODE: $00000499 VOL: 0
; 0000 0365                     return TRACER[MIDDLE];
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 0366                 }break;
;PCODE: $0000049F VOL: 0
; 0000 0367 
; 0000 0368         case 2: {
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 0369                     for(counter=0;counter<=4;counter++)
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 036A                     {
; 0000 036B                         TRACER_TEMP[counter]= read_adc(0);
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 036C                     }
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 036D 
; 0000 036E                     TRACER_SUM= TRACER_TEMP[0]+TRACER_TEMP[1]+TRACER_TEMP[2]+TRACER_TEMP[3]+TRACER_TEMP[4];
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 036F                     TRACER[REAR]=TRACER_SUM/5;
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0370 
; 0000 0371                     if(TRACER[REAR]>=TRACER_THRESHOLD)
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 0372                     {
; 0000 0373 //                        printf("TRACER REAR ACTIVE \r");
; 0000 0374                         TRACER_SECTION[REAR]= TRACER_ACTIVE;
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 0375                     }
; 0000 0376 
; 0000 0377                     else
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 0378                     {
; 0000 0379 //                        printf("TRACER REAR INACTIVE \r");
; 0000 037A                         TRACER_SECTION[REAR]= TRACER_INACTIVE;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 037B                     }
;PCODE: $000004D9 VOL: 0
; 0000 037C                     return TRACER[REAR];
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 037D                 }break;
;PCODE: $000004DF VOL: 0
; 0000 037E     }
;PCODE: $000004E0 VOL: 0
; 0000 037F }
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;//
;//int Tracer_Sampling(int MODE)
;//{
;//
;//
;//    switch(MODE)
;//    {
;//        case 0: {
;//
;//                    TRACER[FRONT]= read_adc(2);
;//                    if(TRACER[FRONT]>=TRACER_THRESHOLD)
;//                    {
;//                        printf("TRACER FRONT ACTIVE \r");
;//                        TRACER_SECTION[FRONT]= TRACER_ACTIVE;
;//                    }
;//
;//                    else
;//                    {
;//                        printf("TRACER FRONT INACTIVE \r");
;//                        TRACER_SECTION[FRONT]= TRACER_INACTIVE;
;//                    }
;//                    return TRACER[FRONT];
;//                }break;
;//
;//        case 1: {
;//                    TRACER[MIDDLE]= read_adc(1);
;//                    if(TRACER[MIDDLE]>=TRACER_THRESHOLD)
;//                    {
;//                        printf("TRACER MIDDLE ACTIVE \r");
;//                        TRACER_SECTION[MIDDLE]= TRACER_ACTIVE;
;//                    }
;//
;//                    else
;//                    {
;//                        printf("TRACER MIDDLE INACTIVE \r");
;//                        TRACER_SECTION[MIDDLE]= TRACER_INACTIVE;
;//                    }
;//                    return TRACER[MIDDLE];
;//                }break;
;//
;//        case 2: {
;//                    TRACER[REAR]= read_adc(0);
;//                    if(TRACER[REAR]>=TRACER_THRESHOLD)
;//                    {
;//                        printf("TRACER REAR ACTIVE \r");
;//                        TRACER_SECTION[REAR]= TRACER_ACTIVE;
;//                    }
;//
;//                    else
;//                    {
;//                        printf("TRACER REAR INACTIVE \r");
;//                        TRACER_SECTION[REAR]= TRACER_INACTIVE;
;//                    }
;//                    return TRACER[REAR];
;//                }break;
;//    }
;//}
;
;
;void Tracer_GetRule(void)
; 0000 03BC {
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
; 0000 03BD     Tracer_Sampling(FRONT);
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 03BE     Tracer_Sampling(MIDDLE);
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 03BF     Tracer_Sampling(REAR);
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 03C0 
; 0000 03C1 //    printf("TRACER[FRONT]: %d \t TRACER[MIDDLE]: %d \t TRACER[REAR]: %d  \r",TRACER[FRONT],TRACER[MIDDLE],TRACER[REAR] ...
; 0000 03C2 
; 0000 03C3     if( (TRACER_SECTION[FRONT]==TRACER_ACTIVE) || (TRACER_SECTION[MIDDLE]==TRACER_ACTIVE) || (TRACER_SECTION[REAR]==TRAC ...
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 03C4     {
; 0000 03C5 //        printf("TRACER STAT ACTIVE \r");
; 0000 03C6         TRACER_STAT=TRACER_ACTIVE;
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 03C7     }
; 0000 03C8     else
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 03C9     {
; 0000 03CA //        printf("TRACER STAT INACTIVE \r");
; 0000 03CB         TRACER_STAT=TRACER_INACTIVE;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 03CC     }
;PCODE: $00000503 VOL: 0
; 0000 03CD 
; 0000 03CE }
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;
;void Tracer_GetData_Gray(void)
; 0000 03D1 {
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 03D2      int TRC_FRONT,TRC_MIDDLE,TRC_REAR;
; 0000 03D3      int THold_Temp;
; 0000 03D4 
; 0000 03D5      TRC_FRONT  = Tracer_Sampling(FRONT);
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;	TRC_FRONT -> R16,R17
;	TRC_MIDDLE -> R18,R19
;	TRC_REAR -> R20,R21
;	THold_Temp -> Y+6
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 03D6      TRC_MIDDLE = Tracer_Sampling(MIDDLE);
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 03D7      TRC_REAR   = Tracer_Sampling(REAR);
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0000 03D8 
; 0000 03D9 //     THold_Temp = max(TRC_FRONT, TRC_MIDDLE);
; 0000 03DA //     THold_Temp = max(THold_Temp, TRC_REAR);
; 0000 03DB      if(TRC_FRONT >= TRC_MIDDLE) THold_Temp = TRC_FRONT;
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 03DC      else THold_Temp= TRC_MIDDLE;
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 03DD 
; 0000 03DE      if(TRC_REAR >= THold_Temp) THold_Temp = TRC_REAR;
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 03DF 
; 0000 03E0      TRACER_GRAYDATA= THold_Temp;
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 03E1 
; 0000 03E2 }
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;
;void Tracer_GetData_White(void)
; 0000 03E5 {
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 03E6      int TRC_FRONT,TRC_MIDDLE,TRC_REAR;
; 0000 03E7      int THold_Temp;
; 0000 03E8 
; 0000 03E9      TRC_FRONT  = Tracer_Sampling(FRONT);
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;	TRC_FRONT -> R16,R17
;	TRC_MIDDLE -> R18,R19
;	TRC_REAR -> R20,R21
;	THold_Temp -> Y+6
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 03EA      TRC_MIDDLE = Tracer_Sampling(MIDDLE);
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 03EB      TRC_REAR   = Tracer_Sampling(REAR);
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 03EC 
; 0000 03ED //     THold_Temp = min(TRC_FRONT, TRC_MIDDLE);
; 0000 03EE //     THold_Temp = min(THold_Temp, TRC_REAR);
; 0000 03EF 
; 0000 03F0      if(TRC_FRONT <= TRC_MIDDLE) THold_Temp = TRC_FRONT;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0000 03F1      else THold_Temp= TRC_MIDDLE;
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 03F2 
; 0000 03F3      if(TRC_REAR <= THold_Temp) THold_Temp = TRC_REAR;
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 03F4 
; 0000 03F5      TRACER_WHITEDATA= THold_Temp;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 03F6 }
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;
;void Tracer_Calibrate_GetRule(void)
; 0000 03F9 {
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 03FA     int Tracer_Diff;
; 0000 03FB     int Tracer_White= TRACER_WHITEDATA;
; 0000 03FC     int Tracer_Gray= TRACER_GRAYDATA;
; 0000 03FD 
; 0000 03FE     //Tracer_Diff= TRACER_WHITEDATA-TRACER_GRAYDATA;
; 0000 03FF     Tracer_Diff= Tracer_White-Tracer_Gray;
;PCODE: $00000554 VOL: 0
;	Tracer_Diff -> R16,R17
;	Tracer_White -> R18,R19
;	Tracer_Gray -> R20,R21
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 0400 
; 0000 0401     if(Tracer_Diff>=80)      TRACER_THRESHOLD   = Tracer_Gray + 75;
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 0402     else if(Tracer_Diff>=75) TRACER_THRESHOLD   = Tracer_Gray + 70;
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 0403     else if(Tracer_Diff>=70) TRACER_THRESHOLD   = Tracer_Gray + 65;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 0404     else if(Tracer_Diff>=65) TRACER_THRESHOLD   = Tracer_Gray + 60;
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 0405     else if(Tracer_Diff>=60) TRACER_THRESHOLD   = Tracer_Gray + 55;
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 0406     else if(Tracer_Diff>=50) TRACER_THRESHOLD   = Tracer_Gray + 45;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 0407     else if(Tracer_Diff>=40) TRACER_THRESHOLD   = Tracer_Gray + 35;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 0408     else if(Tracer_Diff>=30) TRACER_THRESHOLD   = Tracer_Gray + 25;
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0409     else if(Tracer_Diff>=20) TRACER_THRESHOLD   = Tracer_Gray + 15;
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
; 0000 040A     else if(Tracer_Diff>=10) TRACER_THRESHOLD   = Tracer_Gray + 7;
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 040B 
; 0000 040C }
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;
;
;
;
;void TCS3200_Sampling(void)
; 0000 0412 {
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 0413 
; 0000 0414     int counter;
; 0000 0415 
; 0000 0416     MOV_AVG[TCS3200_RED]=0;
;PCODE: $000005BA VOL: 0
;	counter -> R16,R17
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0000 0417     MOV_AVG[TCS3200_GREEN]=0;
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
; 0000 0418     MOV_AVG[TCS3200_BLUE]=0;
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 0419     MOV_AVG[TCS3200_WHITE]=0;
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 041A 
; 0000 041B     for(counter=1;counter<=1;counter++)
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
; 0000 041C     {
; 0000 041D         TCS3200Read_R();
;PCODE: $000005D4 VOL: 0
; 0000 041E         TCS3200Read_G();
;PCODE: $000005D5 VOL: 0
; 0000 041F         TCS3200Read_B();
;PCODE: $000005D6 VOL: 0
; 0000 0420         TCS3200Read_W();
;PCODE: $000005D7 VOL: 0
; 0000 0421 
; 0000 0422         MOV_AVG[TCS3200_RED]+=TCS3200_Pulse_R;
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 0423         MOV_AVG[TCS3200_GREEN]+=TCS3200_Pulse_G;
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 0424         MOV_AVG[TCS3200_BLUE]+=TCS3200_Pulse_B;
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0425         MOV_AVG[TCS3200_WHITE]+=TCS3200_Pulse_W;
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
; 0000 0426 
; 0000 0427          TCS3200_TOTAL_SUM = TCS3200_Pulse_R + TCS3200_Pulse_B + TCS3200_Pulse_G + TCS3200_Pulse_W;
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
; 0000 0428 //         if(TCS3200_TOTAL_SUM >= 1800)
; 0000 0429 //         {
; 0000 042A //            DETECTED_COLOUR         = COLOUR_WHITE;
; 0000 042B //            TRACER_STAT             = TRACER_ACTIVE;
; 0000 042C //            printf("========== CONCLUSION: WHITE ============= \r");
; 0000 042D //
; 0000 042E //            Send_UART(COMMAND_FLAG_A);
; 0000 042F //            Send_UART(COMMAND_FLAG_B);
; 0000 0430 //            Send_UART(DETECTED_COLOUR);
; 0000 0431 //            Send_UART(TRACER_STAT);
; 0000 0432 //
; 0000 0433 //         }
; 0000 0434     }
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
; 0000 0435 
; 0000 0436     MOV_AVG[TCS3200_RED]/=1;
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
; 0000 0437     MOV_AVG[TCS3200_GREEN]/=1;
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 0438     MOV_AVG[TCS3200_BLUE]/=1;
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0000 0439     MOV_AVG[TCS3200_WHITE]/=1;
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0000 043A 
; 0000 043B 
; 0000 043C //    FRONT_THRESHOLD = FRONT_Pulse_R - FRONT_Pulse_B;
; 0000 043D //    FRONT_TOTAL_SUM = FRONT_Pulse_R + FRONT_Pulse_B + FRONT_Pulse_G + FRONT_Pulse_W;
; 0000 043E //
; 0000 043F //    printf("FRONT_THRESHOLD = %d \t\t FRONT_TOTAL_SUM %d \r",FRONT_THRESHOLD, FRONT_TOTAL_SUM);
; 0000 0440 
; 0000 0441     TCS3200_TOTAL_SUM = MOV_AVG[TCS3200_RED] + MOV_AVG[TCS3200_GREEN] + MOV_AVG[TCS3200_BLUE] + MOV_AVG[TCS3200_WHITE];
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 0442 
; 0000 0443 //    printf("TCS3200_TOTAL_SUM %d \r",TCS3200_TOTAL_SUM);
; 0000 0444 //
; 0000 0445 
; 0000 0446 
; 0000 0447 }
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;
;//TCS3200_MODE
;// 1 -> FRONT
;// 2 -> MIDDLE
;void Display_Raw_Data(int TCS3200_MODE)
; 0000 044D {
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 044E     switch(TCS3200_MODE)
;PCODE: $0000061E VOL: 0
;	TCS3200_MODE -> Y+0
;PCODE: $0000061F VOL: 0
; 0000 044F     {
; 0000 0450         case 1:
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
; 0000 0451                 {
; 0000 0452                     printf("============================================================================= \r",);
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 0453                     printf("==========================FRONT TCS3200 MONITOR============================== \r",);
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 0454                     printf("============================================================================= \r",);
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 0455                     printf("============================================================================= \r",);
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 0456                 }break;
;PCODE: $0000063E VOL: 0
; 0000 0457         case 2:
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 0458                 {
; 0000 0459                     printf("============================================================================= \r",);
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
; 0000 045A                     printf("===========================MIDDLE TCS3200 MONITOR============================ \r",);
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 045B                     printf("============================================================================= \r",);
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0000 045C                     printf("Red  : %d \t",(int)MOV_AVG[TCS3200_RED]);
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0000 045D                     printf("Green: %d \t",(int)MOV_AVG[TCS3200_GREEN]);
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 045E                     printf("Blue: %d \t",(int)MOV_AVG[TCS3200_BLUE]);
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 045F                     printf("White: %d \r",(int)MOV_AVG[TCS3200_WHITE]);
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 0460                     printf("TCS3200_THRESHOLD = %d \t\t TCS3200_TOTAL_SUM %d \r",TCS3200_THRESHOLD, TCS3200_TOTAL_SUM);
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 0461                     printf("============================================================================= \r",);
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
; 0000 0462                 }break;
;PCODE: $00000697 VOL: 0
; 0000 0463     }
;PCODE: $00000698 VOL: 0
; 0000 0464 }
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;
;void TCS3200_GetRule(void)
; 0000 0467 {
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
; 0000 0468     TCS3200_Sampling();
;PCODE: $0000069E VOL: 0
; 0000 0469 
; 0000 046A   if(TCS3200_TOTAL_SUM >= Threshold_BW ) //WHITE
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 046B //    if(TCS3200_TOTAL_SUM >= 900 ) //WHITE
; 0000 046C     {
; 0000 046D         DETECTED_COLOUR       = COLOUR_WHITE;
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
; 0000 046E         //TRACER_STAT           = TRACER_ACTIVE;
; 0000 046F //        printf("========== CONCLUSION: WHITE ============= \r");
; 0000 0470     }
; 0000 0471   else if (TCS3200_TOTAL_SUM < Threshold_BW) //GREY CARPET OR BLACK FLOOR
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 0472 //    else if (TCS3200_TOTAL_SUM < 900) //GREY CARPET OR BLACK FLOOR
; 0000 0473     {
; 0000 0474         //BLACK FLOOR
; 0000 0475         if(TCS3200_TOTAL_SUM < Threshold_BG)
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0000 0476 //        if(TCS3200_TOTAL_SUM < 380)
; 0000 0477         {
; 0000 0478             DETECTED_COLOUR   = COLOUR_BLACK;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 0479             //TRACER_STAT        = TRACER_INACTIVE;
; 0000 047A //            printf("========== CONCLUSION: BLACK ============= \r");
; 0000 047B         }
; 0000 047C 
; 0000 047D         //Grey Carpet
; 0000 047E         else if(TCS3200_TOTAL_SUM >= Threshold_BG)
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 047F //        else if( TCS3200_TOTAL_SUM >= 380)
; 0000 0480         {
; 0000 0481             DETECTED_COLOUR   = COLOUR_GRAY;
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 0482            // TRACER_STAT        = TRACER_INACTIVE;
; 0000 0483 //           printf("========== CONCLUSION: GRAY ============= \r");
; 0000 0484         }
; 0000 0485         else
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 0486         {
; 0000 0487             DETECTED_COLOUR     = COLOUR_ERROR;
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0000 0488             //TRACER_STAT         = TRACER_INACTIVE;
; 0000 0489         }
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
; 0000 048A     }
; 0000 048B }
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;
;
;void TCS3200_Autocalibration(void)
; 0000 048F {
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 0490     TCS3200_CMD[0] = getchar();
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
; 0000 0491 
; 0000 0492     while (TCS3200_CMD[0] != START_BUTTON)
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
; 0000 0493     {
; 0000 0494         TCS3200_CMD[0] = getchar();
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
; 0000 0495     }
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
; 0000 0496 }
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;
;
;void Send_Threshold(void)
; 0000 049A {
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
; 0000 049B     int Thold_BW,Thold_BG,Thold_Tracer;
; 0000 049C     Thold_BW= Threshold_BW;
;PCODE: $000006D6 VOL: 0
;	Thold_BW -> R16,R17
;	Thold_BG -> R18,R19
;	Thold_Tracer -> R20,R21
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 049D     Thold_BG= Threshold_BG;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0000 049E     Thold_Tracer= TRACER_THRESHOLD;
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 049F 
; 0000 04A0     Send_UART(COMMAND_FLAG_A);
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
; 0000 04A1     Send_UART(COMMAND_FLAG_B);
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
; 0000 04A2     Send_UART(RAW_VAL_FLAG);
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 04A3 
; 0000 04A4     //Threshold_BW VALUE
; 0000 04A5     MULTIPLY_COUNTER=0;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 04A6     if(Thold_BW>255)
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
; 0000 04A7     {
; 0000 04A8         while( Thold_BW >255)
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
; 0000 04A9         {
; 0000 04AA            Thold_BW-=255;
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
; 0000 04AB            MULTIPLY_COUNTER++;
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0000 04AC         }
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
; 0000 04AD     }
; 0000 04AE     Send_UART(MULTIPLY_COUNTER);
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0000 04AF     Send_UART(Thold_BW);
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 04B0 
; 0000 04B1     //Threshold_BG VALUE
; 0000 04B2     MULTIPLY_COUNTER=0;
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0000 04B3     if(Thold_BG>255)
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
; 0000 04B4     {
; 0000 04B5         while( Thold_BG >255)
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
; 0000 04B6         {
; 0000 04B7            Thold_BG-=255;
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0000 04B8            MULTIPLY_COUNTER++;
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
; 0000 04B9         }
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
; 0000 04BA     }
; 0000 04BB     Send_UART(MULTIPLY_COUNTER);
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
; 0000 04BC     Send_UART(Thold_BG);
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 04BD 
; 0000 04BE     //PHOTODIODE TRACER B/W THRESHOLD
; 0000 04BF     Send_UART(Thold_Tracer);
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
; 0000 04C0 }
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;
;
;
;/*=============== MOVING AVERAGE SMOOTHING ALGORITHM =================
;New average = old average * (n-1)/n + new value /n
;=====================================================================*/
;
;// Function Prototypes
;//int GetMov_AVG(unsigned int TCS_MODE, unsigned int NewVal)
;//{
;//    Mov_AVG[TCS_MODE]= Mov_AVG[TCS_MODE] * (MovAVG_Counter[TCS_MODE]-1) / MovAVG_Counter[TCS_MODE] + NewVal/MovAVG_Cou ...
;//    MovAVG_Counter[TCS_MODE]++;
;//    return Mov_AVG[TCS_MODE];
;//}
;
;//void GetRule_MovAVG(void)
;//{
;////    int buff_1,buff_2;
;////
;////    for(MovAVG_Counter=1;MovAVG_Counter<=5;MovAVG_Counter++)
;////    {
;////        NewVal=FRONT_Read_R();
;////        buff_1= Mov_AVG * (MovAVG_Counter-1);
;////        buff_1= buff_1/ MovAVG_Counter;
;////        buff_2= NewVal/MovAVG_Counter;
;////        Mov_AVG= buff_1 + buff_2 ;
;////    }
;////
;//
;////   NewVal[F_GREEN]=FRONT_Read_G();
;////   GetMov_AVG(F_GREEN,NewVal[F_GREEN]);
;////
;////   NewVal[F_BLUE]=FRONT_Read_B();
;////   GetMov_AVG(F_BLUE,NewVal[F_BLUE]);
;////
;////   NewVal[F_WHITE]=FRONT_Read_W();
;////   GetMov_AVG(F_WHITE,NewVal[F_WHITE]);
;//
;//    printf("============================================================================= \r",);
;//    printf("==========================FRONT TCS3200 MONITOR============================== \r",);
;//    printf("============================================================================= \r",);
;//    printf("Red  : %d \t",(int)Mov_AVG);
;////    printf("Green: %d \t",(int)Mov_AVG[F_GREEN]);
;////    printf("Blue : %d \t",(int)Mov_AVG[F_BLUE]);
;////    printf("White: %d \r",(int)Mov_AVG[F_WHITE]);
;//    printf("============================================================================= \r",);
;//}void Send_UART(unsigned char data)
;
